{"version":3,"sources":["API/constants.js","API/requests.js","API/axios.js","components/Banner.js","components/Nav.js","components/MovieModal/index.js","components/Row.js","components/App.js","serviceWorker.js","index.js"],"names":["baseUrl","requests","fetchDQsPick","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","instance","axios","create","baseURL","Banner","str","n","useState","movie","setMovie","useEffect","get","headers","request","data","result","Math","floor","random","length","fetchData","className","style","backgroundImage","poster_path","backgroundPosition","backgroundSize","title","name","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","alt","src","MovieModal","movieId","genres","url","rating_avg","rating_count","setModalVisibility","addRating","role","onClick","replaceAll","toFixed","open","count","onChange","rating","rating_with_id","console","log","size","color2","id","fetchUrl","Row","movies","setMovies","modalVisibility","movieSelected","setMovieSelection","document","getElementById","scrollLeft","innerWidth","map","idx","handleClick","loading","App","personalizeUrl","setPersonalizeUrl","myRating","setMyRating","push","user_based_param","join","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.64059814.chunk.js","sourcesContent":["export const baseUrl = \"http://alsdnworks.link:8080/\";\r\n","// const API_KEY = \"896c8566fc255f7c52f6ea6bd2901188\";\r\n\r\nconst requests = {\r\n    fetchDQsPick: `/all`,\r\n    fetchActionMovies: `/genres/action`,\r\n    fetchComedyMovies: `/genres/comedy`,\r\n    fetchHorrorMovies: `/genres/horror`,\r\n    fetchRomanceMovies: `/genres/romance`,\r\n}\r\n\r\nexport default requests;","import axios from \"axios\";\r\nimport { baseUrl } from \"./constants\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: baseUrl,\r\n});\r\n\r\nexport default instance;\r\n","import PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"../API/axios\";\r\nimport requests from \"../API/requests\";\r\nimport \"./Banner.css\";\r\n\r\nconst Banner = () => {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  const truncate = (str, n) => {\r\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchDQsPick, {\r\n        headers: {\r\n          \"Access-Control-Allow-Origin\": \"*\",\r\n        },\r\n      });\r\n      //Give to our movie hook one of all the movies randomly\r\n      setMovie(\r\n        request.data.result[\r\n          Math.floor(Math.random() * request.data.result.length - 1)\r\n        ]\r\n      );\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundImage: `url(\r\n                    \"https://image.tmdb.org/t/p/original/${movie?.poster_path}\"\r\n                    )`,\r\n        backgroundPosition: \"top center\",\r\n        backgroundSize: \"cover\",\r\n      }}\r\n    >\r\n      <div className=\"banner__contents\">\r\n        {/**Title */}\r\n        <h1 className=\"banner__title\">\r\n          {movie?.title || movie?.name || movie?.original_name}\r\n        </h1>\r\n        <div className=\"banner__buttons\">\r\n          <button className=\"banner__button play\">\r\n            <PlayArrowIcon />\r\n            Play\r\n          </button>\r\n          {/* <button className=\"banner__button info\"><InfoOutlinedIcon fontSize=\"small\"  paddingRight={20} marginRight={100}/><div className=\"space\"></div> More Information</button> */}\r\n        </div>\r\n        {/**DIV > 2 BUTTONS */}\r\n\r\n        <h1 className=\"banner__description\">\r\n          {truncate(movie?.overview, 150)}\r\n        </h1>\r\n        {/*Description*/}\r\n      </div>\r\n      <div className=\"banner--fadeBottom\" />\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Nav.css\";\r\n\r\nconst Nav = () => {\r\n  const [show, handleShow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 50) {\r\n        handleShow(true);\r\n      } else {\r\n        handleShow(false);\r\n      }\r\n    });\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", () => {});\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <nav className={`nav ${show && \"nav__black\"}`}>\r\n      <img\r\n        alt=\"DQflex logo\"\r\n        src=\"https://i.ibb.co/svtr2tD/dqflex-logo.png\"\r\n        className=\"nav__logo\"\r\n      />\r\n      <img\r\n        alt=\"User logged\"\r\n        src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\r\n        className=\"nav__avatar\"\r\n      />\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","import CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\r\nimport React from \"react\";\r\nimport ReactStars from \"react-stars\";\r\nimport { baseUrl } from \"../../API/constants\";\r\nimport Row from \"../Row\";\r\nimport \"./MovieModal.css\";\r\n\r\nconst MovieModal = ({\r\n  poster_path,\r\n  movieId,\r\n  title,\r\n  genres,\r\n  url,\r\n  rating_avg,\r\n  rating_count,\r\n  setModalVisibility,\r\n  addRating,\r\n}) => {\r\n  const onRating = (rating) => {\r\n    const rating_with_id = `${movieId}:${rating}`;\r\n    console.log(rating_with_id);\r\n    addRating(rating_with_id);\r\n    setModalVisibility(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"presentation\" role=\"presentation\">\r\n      <div className=\"wrapper-modal\">\r\n        <div className=\"modal\">\r\n          <span\r\n            onClick={() => setModalVisibility(false)}\r\n            className=\"modal-close\"\r\n          >\r\n            <CancelIcon />\r\n          </span>\r\n          <div className=\"modal__header\">\r\n            <img\r\n              className=\"modal__poster-img\"\r\n              src={`${poster_path}`}\r\n              alt={`${title}`}\r\n            />\r\n            <div className=\"modal__content\">\r\n              <p className=\"modal__details\">\r\n                <span className=\"modal__user-perc\">Genre: </span>{\" \"}\r\n                {genres.replaceAll(\"|\", \" | \")}\r\n              </p>\r\n              <h3 className=\"modal__title\">{title}</h3>\r\n              <p className=\"modal__overview\">\r\n                Vote Average: {rating_avg.toFixed(2)}\r\n              </p>\r\n              <p className=\"modal__overview\">Vote Count: {rating_count}</p>\r\n              <div className=\"modal__header\">\r\n                <button\r\n                  className=\"banner__button play\"\r\n                  onClick={() => {\r\n                    window.open(url);\r\n                  }}\r\n                >\r\n                  <PlayArrowIcon />\r\n                  Detail\r\n                </button>\r\n                <ReactStars\r\n                  count={5}\r\n                  onChange={onRating}\r\n                  size={24}\r\n                  color2={\"#ffd700\"}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <Row\r\n            title=\"You may also like...\"\r\n            id={movieId}\r\n            fetchUrl={`${baseUrl}/item-based/${movieId}`}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieModal;\r\n","import ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"../API/axios\";\r\nimport MovieModal from \"./MovieModal\";\r\nimport \"./Row.css\";\r\n\r\nconst Row = ({ title, fetchUrl, id, addRating }) => {\r\n  const base_url = \"https://image.tmdb.org/t/p/original/\";\r\n  const [movies, setMovies] = useState([]);\r\n  const [modalVisibility, setModalVisibility] = useState(false);\r\n  const [movieSelected, setMovieSelection] = useState({});\r\n\r\n  //A snippet of code which runs based on a specific condition/variable\r\n  useEffect(() => {\r\n    console.log(id, fetchUrl);\r\n    //if [], run once when the row loads, and dont run again\r\n\r\n    async function fetchData() {\r\n      //Dont move until we get the API answer\r\n      const request = await axios.get(fetchUrl, {\r\n        headers: {\r\n          \"Access-Control-Allow-Origin\": \"*\",\r\n        },\r\n      });\r\n      setMovies(request.data.result);\r\n      return request;\r\n    }\r\n\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  const handleClick = (movie) => {\r\n    setModalVisibility(true);\r\n    setMovieSelection(movie);\r\n  };\r\n  return (\r\n    <section className=\"row\">\r\n      {/** TITLE */}\r\n      <h2>{title}</h2>\r\n      <div className=\"slider\">\r\n        <div className=\"slider__arrow-left\">\r\n          <span\r\n            className=\"arrow\"\r\n            onClick={() => {\r\n              document.getElementById(id).scrollLeft -= window.innerWidth - 80;\r\n            }}\r\n          >\r\n            <ArrowBackIosIcon />\r\n          </span>\r\n        </div>\r\n        <div id={id} className=\"row__posters\">\r\n          {/**SEVERAL ROW__POSTER */}\r\n          {movies.map((movie, idx) => (\r\n            <img\r\n              key={idx}\r\n              onClick={() => handleClick(movie)}\r\n              className={`row__poster row__posterLarge`}\r\n              src={`${base_url}${movie.poster_path}`}\r\n              loading=\"lazy\"\r\n              alt={movie.title}\r\n            />\r\n          ))}\r\n        </div>\r\n        <div className=\"slider__arrow-right\">\r\n          <span\r\n            className=\"arrow\"\r\n            onClick={() => {\r\n              document.getElementById(id).scrollLeft += window.innerWidth - 80;\r\n            }}\r\n          >\r\n            <ArrowForwardIosIcon />\r\n          </span>\r\n        </div>\r\n      </div>\r\n      {modalVisibility && (\r\n        <MovieModal\r\n          {...movieSelected}\r\n          setModalVisibility={setModalVisibility}\r\n          addRating={addRating}\r\n        />\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Row;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { baseUrl } from \"../API/constants\";\r\nimport requests from \"../API/requests\";\r\nimport \"./App.css\";\r\nimport Banner from \"./Banner\";\r\nimport Nav from \"./Nav\";\r\nimport Row from \"./Row\";\r\n\r\nconst App = () => {\r\n  const [personalizeUrl, setPersonalizeUrl] = useState(baseUrl + \"/all\");\r\n  const [myRating, setMyRating] = useState([]);\r\n\r\n  const addRating = (rating) => {\r\n    myRating.push(rating);\r\n    setMyRating(myRating);\r\n    const user_based_param = myRating.join(\"&params=\");\r\n    const url = `${baseUrl}/user-based/?params=${user_based_param}`;\r\n    setPersonalizeUrl(url);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (myRating.length > 0) {\r\n      const user_based_param = myRating.join(\"&params=\");\r\n      const url = `${baseUrl}/user-based/?params=${user_based_param}`;\r\n      setPersonalizeUrl(url);\r\n    }\r\n    console.log(personalizeUrl);\r\n  });\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {/**NAV */}\r\n      <Nav />\r\n      {/*BANNER*/}\r\n      <Banner />\r\n\r\n      <Row\r\n        title=\"Recommend For You\"\r\n        id=\"RF\"\r\n        fetchUrl={personalizeUrl}\r\n        addRating={addRating}\r\n        key={personalizeUrl}\r\n      />\r\n\r\n      <Row\r\n        title=\"DQ's Pick\"\r\n        id=\"DP\"\r\n        fetchUrl={requests.fetchDQsPick}\r\n        addRating={addRating}\r\n      />\r\n      <Row\r\n        title=\"Action Movies\"\r\n        id=\"AM\"\r\n        fetchUrl={requests.fetchActionMovies}\r\n        addRating={addRating}\r\n      />\r\n      <Row\r\n        title=\"Comedy Movies\"\r\n        id=\"CM\"\r\n        fetchUrl={requests.fetchComedyMovies}\r\n        addRating={addRating}\r\n      />\r\n      <Row\r\n        title=\"Horror Movies\"\r\n        id=\"HM\"\r\n        fetchUrl={requests.fetchHorrorMovies}\r\n        addRating={addRating}\r\n      />\r\n      <Row\r\n        title=\"Romance  Movies\"\r\n        id=\"RM\"\r\n        fetchUrl={requests.fetchRomanceMovies}\r\n        addRating={addRating}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}